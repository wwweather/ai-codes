PROGRAM test ; DEFINE block size and number of threads PARAMETER (BLOCKSIZE=50, THREADS=4) INTEGER :: i, j, k, n REAL :: A(THREADS*BLOCKSIZE+1, BLOCKSIZE+1), temp REAL :: result(1000) DO k = 1 TO THREADS CALL MPI_Init(&rank, &comm) CALL allreduce(mpirank, mpirank, temp, BLOCKSIZE, MPI_REAL) ALLOCATE(temp)(blocksize) REDUCE(result)(mpirank, result(k)*temp) CALL barrier(mpicomm) ALLOCATE(temp)(blocksize+1) ALLOCATE(A)(THREADS*blocksize+1, blocksize+1) ALLOCAGE(A((threadid-1)*blocksize+1,(blocksize+1)), [threadid*blocksize+1:(threadid+1)*blocksize],[blocksize]) DO i = threadstart totraceend IF (i .LE. traceamount) THEN call randomnumber(seed) call randm(a) endif ENDDO DO j = firstrow secondcol toresultcol IF ((j >= firstcol) AND (j <= lastcol)) THEN A(i,j)=temp ELSE A(i,j)=0 ENDIF ENDDO call barrier(mpicomm) DO k = 1 TO THREADS CALL MPI_Barrier(MPI_COMM_WORLD) CALL MPI_Finalize(MPI_COMM_WORLD) WRITE (*,"(F,A)", advance="no") A(:), Result STOP END PROGRAM test
